{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"textStyle\", \"style\", \"numeric\", \"maxFontSizeMultiplier\", \"testID\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nvar DataTableCell = function DataTableCell(_ref) {\n  var children = _ref.children,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    numeric = _ref.numeric,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    testID: testID,\n    style: [styles.container, numeric && styles.right, style]\n  }), React.createElement(CellContent, {\n    textStyle: textStyle,\n    testID: testID,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children));\n};\nvar CellContent = function CellContent(_ref2) {\n  var children = _ref2.children,\n    textStyle = _ref2.textStyle,\n    maxFontSizeMultiplier = _ref2.maxFontSizeMultiplier,\n    testID = _ref2.testID;\n  if (React.isValidElement(children)) {\n    return children;\n  }\n  return React.createElement(Text, {\n    style: textStyle,\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-text-container\"\n  }, children);\n};\nDataTableCell.displayName = 'DataTable.Cell';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  right: {\n    justifyContent: 'flex-end'\n  }\n});\nexport default DataTableCell;","map":{"version":3,"names":["React","StyleSheet","TouchableRipple","Text","DataTableCell","_ref","children","textStyle","style","numeric","maxFontSizeMultiplier","testID","rest","_objectWithoutProperties","_excluded","createElement","_extends","styles","container","right","CellContent","_ref2","isValidElement","numberOfLines","displayName","create","flex","flexDirection","alignItems","justifyContent"],"sources":["C:\\Users\\Digitacion Nery\\Desktop\\TornilloFeliz\\APP_MOBILE_DESARROLLO\\node_modules\\react-native-paper\\src\\components\\DataTable\\DataTableCell.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  GestureResponderEvent,\r\n} from 'react-native';\r\n\r\nimport type { $RemoveChildren } from '../../types';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\nimport Text from '../Typography/Text';\r\n\r\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\r\n  /**\r\n   * Content of the `DataTableCell`.\r\n   */\r\n  children: React.ReactNode;\r\n  /**\r\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\r\n   */\r\n  numeric?: boolean;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  style?: StyleProp<ViewStyle>;\r\n  /**\r\n   * Text content style of the `DataTableCell`.\r\n   */\r\n  textStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Specifies the largest possible scale a text font can reach.\r\n   */\r\n  maxFontSizeMultiplier?: number;\r\n  /**\r\n   * testID to be used on tests.\r\n   */\r\n  testID?: string;\r\n};\r\n\r\n/**\r\n * A component to show a single cell inside of a table.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { DataTable } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *      <DataTable.Row>\r\n *        <DataTable.Cell numeric>1</DataTable.Cell>\r\n *        <DataTable.Cell numeric>2</DataTable.Cell>\r\n *        <DataTable.Cell numeric>3</DataTable.Cell>\r\n *        <DataTable.Cell numeric>4</DataTable.Cell>\r\n *      </DataTable.Row>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\r\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\r\n *\r\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\r\n */\r\nconst DataTableCell = ({\r\n  children,\r\n  textStyle,\r\n  style,\r\n  numeric,\r\n  maxFontSizeMultiplier,\r\n  testID,\r\n  ...rest\r\n}: Props) => {\r\n  return (\r\n    <TouchableRipple\r\n      {...rest}\r\n      testID={testID}\r\n      style={[styles.container, numeric && styles.right, style]}\r\n    >\r\n      <CellContent\r\n        textStyle={textStyle}\r\n        testID={testID}\r\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\r\n      >\r\n        {children}\r\n      </CellContent>\r\n    </TouchableRipple>\r\n  );\r\n};\r\n\r\nconst CellContent = ({\r\n  children,\r\n  textStyle,\r\n  maxFontSizeMultiplier,\r\n  testID,\r\n}: Pick<\r\n  Props,\r\n  'children' | 'textStyle' | 'testID' | 'maxFontSizeMultiplier'\r\n>) => {\r\n  if (React.isValidElement(children)) {\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <Text\r\n      style={textStyle}\r\n      numberOfLines={1}\r\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\r\n      testID={`${testID}-text-container`}\r\n    >\r\n      {children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nDataTableCell.displayName = 'DataTable.Cell';\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n\r\n  right: {\r\n    justifyContent: 'flex-end',\r\n  },\r\n});\r\n\r\nexport default DataTableCell;\r\n"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAU9B,OAAOC,eAAe;AACtB,OAAOC,IAAI;AAuDX,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAQN;EAAA,IAPXC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,SAAS,GAAAF,IAAA,CAATE,SAAS;IACTC,KAAK,GAAAH,IAAA,CAALG,KAAK;IACLC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IACPC,qBAAqB,GAAAL,IAAA,CAArBK,qBAAqB;IACrBC,MAAM,GAAAN,IAAA,CAANM,MAAM;IACHC,IAAA,GAAAC,wBAAA,CAAAR,IAAA,EAAAS,SAAA;EAEH,OACEd,KAAA,CAAAe,aAAA,CAACb,eAAe,EAAAc,QAAA,KACVJ,IAAI;IACRD,MAAM,EAAEA,MAAO;IACfH,KAAK,EAAE,CAACS,MAAM,CAACC,SAAS,EAAET,OAAO,IAAIQ,MAAM,CAACE,KAAK,EAAEX,KAAK;EAAE,IAE1DR,KAAA,CAAAe,aAAA,CAACK,WAAW;IACVb,SAAS,EAAEA,SAAU;IACrBI,MAAM,EAAEA,MAAO;IACfD,qBAAqB,EAAEA;EAAsB,GAE5CJ,QACU,CACE,CAAC;AAEtB,CAAC;AAED,IAAMc,WAAW,GAAG,SAAdA,WAAWA,CAAAC,KAAA,EAQX;EAAA,IAPJf,QAAQ,GAAAe,KAAA,CAARf,QAAQ;IACRC,SAAS,GAAAc,KAAA,CAATd,SAAS;IACTG,qBAAqB,GAAAW,KAAA,CAArBX,qBAAqB;IACrBC,MAAA,GAAAU,KAAA,CAAAV,MAAA;EAKA,IAAIX,KAAK,CAACsB,cAAc,CAAChB,QAAQ,CAAC,EAAE;IAClC,OAAOA,QAAQ;EACjB;EAEA,OACEN,KAAA,CAAAe,aAAA,CAACZ,IAAI;IACHK,KAAK,EAAED,SAAU;IACjBgB,aAAa,EAAE,CAAE;IACjBb,qBAAqB,EAAEA,qBAAsB;IAC7CC,MAAM,EAAKA,MAAM;EAAkB,GAElCL,QACG,CAAC;AAEX,CAAC;AAEDF,aAAa,CAACoB,WAAW,GAAG,gBAAgB;AAE5C,IAAMP,MAAM,GAAGhB,UAAU,CAACwB,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CAAC;IACPC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;EACd,CAAC;EAEDT,KAAK,EAAE;IACLU,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAezB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}