{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"background\", \"accessibilityLabel\", \"accessibilityRole\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"rippleColor\", \"showSelectedOverlay\", \"showSelectedCheck\", \"ellipsizeMode\", \"compact\", \"elevated\", \"maxFontSizeMultiplier\", \"hitSlop\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport { getChipColors } from \"./helpers\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport hasTouchHandler from \"../../utils/hasTouchHandler\";\nimport Icon from \"../Icon\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    background = _ref.background,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$accessibilityRol = _ref.accessibilityRole,\n    accessibilityRole = _ref$accessibilityRol === void 0 ? 'button' : _ref$accessibilityRol,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onPressOut = _ref.onPressOut,\n    onPressIn = _ref.onPressIn,\n    delayLongPress = _ref.delayLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,\n    selectedColor = _ref.selectedColor,\n    customRippleColor = _ref.rippleColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    _ref$showSelectedChec = _ref.showSelectedCheck,\n    showSelectedCheck = _ref$showSelectedChec === void 0 ? true : _ref$showSelectedChec,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    hitSlop = _ref.hitSlop,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var isWeb = Platform.OS === 'web';\n  var _React$useRef = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var hasPassedTouchHandler = hasTouchHandler({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  });\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = useLatestCallback(function (e) {\n    var scale = theme.animation.scale;\n    onPressIn === null || onPressIn === void 0 || onPressIn(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: isWeb || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  var handlePressOut = useLatestCallback(function (e) {\n    var scale = theme.animation.scale;\n    onPressOut === null || onPressOut === void 0 || onPressOut(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: isWeb || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  });\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = roundness * (isV3 ? 2 : 4);\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = getChipColors({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled,\n      customRippleColor: customRippleColor\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    rippleColor = _getChipColors.rippleColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = _objectSpread({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && styles.md3Container, !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: testID + \"-container\",\n    theme: theme,\n    container: true\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    background: background,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme,\n    hitSlop: hitSlop\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected && showSelectedCheck ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(Pressable, {\n    onPress: onClose,\n    disabled: disabled,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3Container: {\n    borderWidth: 1\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    width: '100%'\n  }\n});\nexport default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","Pressable","View","useLatestCallback","getChipColors","useInternalTheme","white","hasTouchHandler","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","background","accessibilityLabel","_ref$accessibilityRol","accessibilityRole","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","themeOverrides","theme","_ref$testID","testID","selectedColor","customRippleColor","rippleColor","_ref$showSelectedOver","showSelectedOverlay","_ref$showSelectedChec","showSelectedCheck","ellipsizeMode","compact","_ref$elevated","elevated","maxFontSizeMultiplier","hitSlop","rest","_objectWithoutProperties","_excluded","isV3","roundness","isWeb","OS","_React$useRef","useRef","Value","elevation","current","hasPassedTouchHandler","isOutlined","handlePressIn","e","scale","animation","timing","toValue","duration","useNativeDriver","constants","reactNativeVersion","minor","start","handlePressOut","opacity","defaultBorderRadius","iconSize","_ref2","flatten","customBackgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","_getChipColors","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","_objectSpread","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3Container","borderless","touchable","undefined","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["C:\\Users\\Digitacion Nery\\Desktop\\TornilloFeliz\\APP_MOBILE_DESARROLLO\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  AccessibilityState,\r\n  Animated,\r\n  ColorValue,\r\n  GestureResponderEvent,\r\n  Platform,\r\n  PressableAndroidRippleConfig,\r\n  StyleProp,\r\n  StyleSheet,\r\n  TextStyle,\r\n  Pressable,\r\n  View,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport useLatestCallback from 'use-latest-callback';\r\n\r\nimport { ChipAvatarProps, getChipColors } from './helpers';\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport { white } from '../../styles/themes/v2/colors';\r\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\r\nimport hasTouchHandler from '../../utils/hasTouchHandler';\r\nimport type { IconSource } from '../Icon';\r\nimport Icon from '../Icon';\r\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\r\nimport Surface from '../Surface';\r\nimport TouchableRipple, {\r\n  Props as TouchableRippleProps,\r\n} from '../TouchableRipple/TouchableRipple';\r\nimport Text from '../Typography/Text';\r\n\r\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\r\n  /**\r\n   * Mode of the chip.\r\n   * - `flat` - flat chip without outline.\r\n   * - `outlined` - chip with an outline.\r\n   */\r\n  mode?: 'flat' | 'outlined';\r\n  /**\r\n   * Text content of the `Chip`.\r\n   */\r\n  children: React.ReactNode;\r\n  /**\r\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\r\n   */\r\n  icon?: IconSource;\r\n  /**\r\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\r\n   */\r\n  avatar?: React.ReactNode;\r\n  /**\r\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\r\n   */\r\n  closeIcon?: IconSource;\r\n  /**\r\n   * Whether chip is selected.\r\n   */\r\n  selected?: boolean;\r\n  /**\r\n   * Whether to style the chip color as selected.\r\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\r\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\r\n   */\r\n  selectedColor?: string;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Whether to display overlay on selected chip\r\n   */\r\n  showSelectedOverlay?: boolean;\r\n  /**\r\n   * Whether to display default check icon on selected chip.\r\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\r\n   */\r\n  showSelectedCheck?: boolean;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Type of background drawabale to display the feedback (Android).\r\n   * https://reactnative.dev/docs/pressable#rippleconfig\r\n   */\r\n  background?: PressableAndroidRippleConfig;\r\n  /**\r\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\r\n   */\r\n  closeIconAccessibilityLabel?: string;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Function to execute on long press.\r\n   */\r\n  onLongPress?: () => void;\r\n  /**\r\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\r\n   */\r\n  onPressIn?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Function to execute as soon as the touch is released even before onPress.\r\n   */\r\n  onPressOut?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Function to execute on close button press. The close button appears only when this prop is specified.\r\n   */\r\n  onClose?: () => void;\r\n  /**\r\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\r\n   */\r\n  delayLongPress?: number;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\r\n   */\r\n  compact?: boolean;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Whether chip should have the elevation.\r\n   */\r\n  elevated?: boolean;\r\n  /**\r\n   * Style of chip's text\r\n   */\r\n  textStyle?: StyleProp<TextStyle>;\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * Sets additional distance outside of element in which a press can be detected.\r\n   */\r\n  hitSlop?: TouchableRippleProps['hitSlop'];\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  /**\r\n   * Pass down testID from chip props to touchable for Detox tests.\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * Ellipsize Mode for the children text\r\n   */\r\n  ellipsizeMode?: EllipsizeProp;\r\n  /**\r\n   * Specifies the largest possible scale a text font can reach.\r\n   */\r\n  maxFontSizeMultiplier?: number;\r\n};\r\n\r\n/**\r\n * Chips are compact elements that can represent inputs, attributes, or actions.\r\n * They can have an icon or avatar on the left, and a close button icon on the right.\r\n * They are typically used to:\r\n * <ul>\r\n *  <li>Present multiple options </li>\r\n *  <li>Represent attributes active or chosen </li>\r\n *  <li>Present filter options </li>\r\n *  <li>Trigger actions related to primary content </li>\r\n * </ul>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Chip } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Chip = ({\r\n  mode = 'flat',\r\n  children,\r\n  icon,\r\n  avatar,\r\n  selected = false,\r\n  disabled = false,\r\n  background,\r\n  accessibilityLabel,\r\n  accessibilityRole = 'button',\r\n  closeIconAccessibilityLabel = 'Close',\r\n  onPress,\r\n  onLongPress,\r\n  onPressOut,\r\n  onPressIn,\r\n  delayLongPress,\r\n  onClose,\r\n  closeIcon,\r\n  textStyle,\r\n  style,\r\n  theme: themeOverrides,\r\n  testID = 'chip',\r\n  selectedColor,\r\n  rippleColor: customRippleColor,\r\n  showSelectedOverlay = false,\r\n  showSelectedCheck = true,\r\n  ellipsizeMode,\r\n  compact,\r\n  elevated = false,\r\n  maxFontSizeMultiplier,\r\n  hitSlop,\r\n  ...rest\r\n}: Props) => {\r\n  const theme = useInternalTheme(themeOverrides);\r\n  const { isV3, roundness } = theme;\r\n  const isWeb = Platform.OS === 'web';\r\n\r\n  const { current: elevation } = React.useRef<Animated.Value>(\r\n    new Animated.Value(isV3 && elevated ? 1 : 0)\r\n  );\r\n\r\n  const hasPassedTouchHandler = hasTouchHandler({\r\n    onPress,\r\n    onLongPress,\r\n    onPressIn,\r\n    onPressOut,\r\n  });\r\n\r\n  const isOutlined = mode === 'outlined';\r\n\r\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\r\n    const { scale } = theme.animation;\r\n    onPressIn?.(e);\r\n    Animated.timing(elevation, {\r\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\r\n      duration: 200 * scale,\r\n      useNativeDriver:\r\n        isWeb || Platform.constants.reactNativeVersion.minor <= 72,\r\n    }).start();\r\n  });\r\n\r\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\r\n    const { scale } = theme.animation;\r\n    onPressOut?.(e);\r\n    Animated.timing(elevation, {\r\n      toValue: isV3 && elevated ? 1 : 0,\r\n      duration: 150 * scale,\r\n      useNativeDriver:\r\n        isWeb || Platform.constants.reactNativeVersion.minor <= 72,\r\n    }).start();\r\n  });\r\n\r\n  const opacity = isV3 ? 0.38 : 0.26;\r\n  const defaultBorderRadius = roundness * (isV3 ? 2 : 4);\r\n  const iconSize = isV3 ? 18 : 16;\r\n\r\n  const {\r\n    backgroundColor: customBackgroundColor,\r\n    borderRadius = defaultBorderRadius,\r\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\r\n\r\n  const {\r\n    borderColor,\r\n    textColor,\r\n    iconColor,\r\n    rippleColor,\r\n    selectedBackgroundColor,\r\n    backgroundColor,\r\n  } = getChipColors({\r\n    isOutlined,\r\n    theme,\r\n    selectedColor,\r\n    showSelectedOverlay,\r\n    customBackgroundColor,\r\n    disabled,\r\n    customRippleColor,\r\n  });\r\n\r\n  const accessibilityState: AccessibilityState = {\r\n    selected,\r\n    disabled,\r\n  };\r\n\r\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\r\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\r\n  const labelSpacings = {\r\n    marginRight: onClose ? 0 : 8 * multiplier,\r\n    marginLeft:\r\n      avatar || icon || (selected && showSelectedCheck)\r\n        ? 4 * multiplier\r\n        : 8 * multiplier,\r\n  };\r\n  const contentSpacings = {\r\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\r\n  };\r\n  const labelTextStyle = {\r\n    color: textColor,\r\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\r\n  };\r\n  return (\r\n    <Surface\r\n      style={[\r\n        styles.container,\r\n        isV3 && styles.md3Container,\r\n        !theme.isV3 && {\r\n          elevation: elevationStyle,\r\n        },\r\n        {\r\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\r\n          borderColor,\r\n          borderRadius,\r\n        },\r\n        style,\r\n      ]}\r\n      {...(theme.isV3 && { elevation: elevationStyle })}\r\n      {...rest}\r\n      testID={`${testID}-container`}\r\n      theme={theme}\r\n      container\r\n    >\r\n      <TouchableRipple\r\n        borderless\r\n        background={background}\r\n        style={[{ borderRadius }, styles.touchable]}\r\n        onPress={onPress}\r\n        onLongPress={onLongPress}\r\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\r\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\r\n        delayLongPress={delayLongPress}\r\n        rippleColor={rippleColor}\r\n        disabled={disabled}\r\n        accessibilityLabel={accessibilityLabel}\r\n        accessibilityRole={accessibilityRole}\r\n        accessibilityState={accessibilityState}\r\n        testID={testID}\r\n        theme={theme}\r\n        hitSlop={hitSlop}\r\n      >\r\n        <View\r\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\r\n        >\r\n          {avatar && !icon ? (\r\n            <View\r\n              style={[\r\n                styles.avatarWrapper,\r\n                isV3 && styles.md3AvatarWrapper,\r\n                disabled && { opacity },\r\n              ]}\r\n            >\r\n              {React.isValidElement<ChipAvatarProps>(avatar)\r\n                ? React.cloneElement(avatar, {\r\n                    style: [styles.avatar, avatar.props.style],\r\n                  })\r\n                : avatar}\r\n            </View>\r\n          ) : null}\r\n          {icon || (selected && showSelectedCheck) ? (\r\n            <View\r\n              style={[\r\n                styles.icon,\r\n                isV3 && styles.md3Icon,\r\n                avatar\r\n                  ? [\r\n                      styles.avatar,\r\n                      styles.avatarSelected,\r\n                      isV3 && selected && styles.md3SelectedIcon,\r\n                    ]\r\n                  : null,\r\n              ]}\r\n            >\r\n              {icon ? (\r\n                <Icon\r\n                  source={icon}\r\n                  color={\r\n                    avatar\r\n                      ? white\r\n                      : !disabled && theme.isV3\r\n                      ? theme.colors.primary\r\n                      : iconColor\r\n                  }\r\n                  size={18}\r\n                  theme={theme}\r\n                />\r\n              ) : (\r\n                <MaterialCommunityIcon\r\n                  name=\"check\"\r\n                  color={avatar ? white : iconColor}\r\n                  size={18}\r\n                  direction=\"ltr\"\r\n                />\r\n              )}\r\n            </View>\r\n          ) : null}\r\n          <Text\r\n            variant=\"labelLarge\"\r\n            selectable={false}\r\n            numberOfLines={1}\r\n            style={[\r\n              isV3 ? styles.md3LabelText : styles.labelText,\r\n              labelTextStyle,\r\n              labelSpacings,\r\n              textStyle,\r\n            ]}\r\n            ellipsizeMode={ellipsizeMode}\r\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\r\n          >\r\n            {children}\r\n          </Text>\r\n        </View>\r\n      </TouchableRipple>\r\n      {onClose ? (\r\n        <View style={styles.closeButtonStyle}>\r\n          <Pressable\r\n            onPress={onClose}\r\n            disabled={disabled}\r\n            accessibilityRole=\"button\"\r\n            accessibilityLabel={closeIconAccessibilityLabel}\r\n          >\r\n            <View\r\n              style={[\r\n                styles.icon,\r\n                styles.closeIcon,\r\n                isV3 && styles.md3CloseIcon,\r\n              ]}\r\n            >\r\n              {closeIcon ? (\r\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\r\n              ) : (\r\n                <MaterialCommunityIcon\r\n                  name={isV3 ? 'close' : 'close-circle'}\r\n                  size={iconSize}\r\n                  color={iconColor}\r\n                  direction=\"ltr\"\r\n                />\r\n              )}\r\n            </View>\r\n          </Pressable>\r\n        </View>\r\n      ) : null}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderStyle: 'solid',\r\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\r\n  },\r\n  md3Container: {\r\n    borderWidth: 1,\r\n  },\r\n  content: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingLeft: 4,\r\n    position: 'relative',\r\n  },\r\n  md3Content: {\r\n    paddingLeft: 0,\r\n  },\r\n  icon: {\r\n    padding: 4,\r\n    alignSelf: 'center',\r\n  },\r\n  md3Icon: {\r\n    paddingLeft: 8,\r\n    paddingRight: 0,\r\n  },\r\n  closeIcon: {\r\n    marginRight: 4,\r\n  },\r\n  md3CloseIcon: {\r\n    marginRight: 8,\r\n    padding: 0,\r\n  },\r\n  labelText: {\r\n    minHeight: 24,\r\n    lineHeight: 24,\r\n    textAlignVertical: 'center',\r\n    marginVertical: 4,\r\n  },\r\n  md3LabelText: {\r\n    textAlignVertical: 'center',\r\n    marginVertical: 6,\r\n  },\r\n  avatar: {\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: 12,\r\n  },\r\n  avatarWrapper: {\r\n    marginRight: 4,\r\n  },\r\n  md3AvatarWrapper: {\r\n    marginLeft: 4,\r\n    marginRight: 0,\r\n  },\r\n  md3SelectedIcon: {\r\n    paddingLeft: 4,\r\n  },\r\n  // eslint-disable-next-line react-native/no-color-literals\r\n  avatarSelected: {\r\n    position: 'absolute',\r\n    top: 4,\r\n    left: 4,\r\n    backgroundColor: 'rgba(0, 0, 0, .29)',\r\n  },\r\n  closeButtonStyle: {\r\n    position: 'absolute',\r\n    right: 0,\r\n    height: '100%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  touchable: {\r\n    width: '100%',\r\n  },\r\n});\r\n\r\nexport default Chip;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}